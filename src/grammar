DIGIT: [0-9];
CHAR: [a-zA-Z_]
INT: DIGIT+;
FLOAT: DIGIT+ '.' DIGIT+ EXPONENT?;
EXPONENT: [eE][+-]? DIGIT+;
STRING: '"' (CHAR | DIGIT)* '"';

TRUE: 'true';
FALSE: 'false';
IDENT: CHAR+ [a-zA-Z_0-9]*;
LET: 'let';
IF: 'if';
ELSE: 'else';
WHILE: 'while';
BREAK: 'break';
CONTINUE: 'continue';
FUNCTION: 'fn';

U8: 'u8';
U16: 'u16';
U32: 'u32';
U64: 'u64';

I8: 'i8';
I16: 'i16';
I32: 'i32';
I64: 'i64';

F32: 'f32';
F64: 'f64';

data_type: U8 | U16 | U32 | U64 
            | I8 | I16 | I32 | I64
            | F32 | F64
            | list_type ;

return_type: data_type | '()';

list_type: '[' data_type ';' INT ']' ;

COMMENT: '//' .* '\n' | '/*' .* '*/'

stmt: initialize | exprStmt | block | if | while | function_dec | function_def;
exprStmt: expr ';' ;
breakStmt: BREAK ';' ;
continueStmt: CONTINUE ';' ;
initialize: LET IDENT (':' DATA_TYPE)? '=' exprStmt;
block: '{' stmt* '}';
if: IF expr stmt (ELSE if)* (ELSE stmt)?;
while: WHILE expr stmt;
function_dec: FUNCTION IDENT '(' (IDENT ':' DATA_TYPE)* ')' ( '->' RETURN_TYPE )? ';' ;
function_def: FUNCTION IDENT '(' (IDENT ':' DATA_TYPE)* ')' ( '->' RETURN_TYPE )? block;

expr: equality | function_call;
assignment: IDENT ('=' expr)?;
function_call: IDENT '(' expr* ')';

equality: comparison (('==' | '!=') comparison)*;
comparison: term (('>' | '>=' | '<' | '<=') term)*;
term: factor ([+-] factor)*;
factor: unary ([*/%] unary)*;
unary: [+-] unary | primary;
primary: INT | FLOAT | TRUE | FALSE | '(' expr ')' | assignment;
